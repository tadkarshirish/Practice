class Node{
	public int data;
	public Node left;
	public Node right;
}

public class Main{

    static Node newNode(int data , Node node)    // insertion into BST
	{
		if(node==null)
		{
			node = new Node();
			node.data=data;
			node.right = null;
			node.left=null;
			return node;
		}
		else
		{
			Node current = node;
			if(data >=current.data)
			{
				current.right=newNode(data,current.right);
			}
			else if(data < current.data)
			{
				current.left=newNode(data,current.left);
			}
		}
		return node;
	}
	
	static void printTree(Node root)      // printing binary search tree
	{
	if(root!=null)
	{
			printTree(root.left);
			System.out.print(root.data +" ");
			printTree(root.right);
		
	}
	}
	
	static int min(Node root)              // min in BST
	{
	    Node current = root;
	 while(current.left !=null) 
    	{
    	    current=current.left;
    	}
    	return current.data;
	}
	
	static int max( Node root)		 // max in BST
	{
	    Node current = root;
	    while(current.right!=null)
	    {
	        current=current.right;
	    }
	     	return current.data;
	    
	}

	  static void preorder(Node root) {			// Pre order traversal
        if(root !=  null) {
            //Visit the node-Printing the node data  
            System.out.printf("%d ",root.data);
            preorder(root.left);
            preorder(root.right);
            }
      
         }
         
        static void postorder(Node root) {		// Post order traversal
        if(root !=  null) {
            //Visit the node-Printing the node data  
           postorder(root.left);
            postorder(root.right);
             System.out.printf("%d ",root.data);
            }
          
         }
         
         static void inorder(Node root) {		// Inorder order traversal
         if(root !=  null) {
            //Visit the node-Printing the node data  
           inorder(root.left);
           System.out.printf("%d ",root.data);
            inorder(root.right);
            }
           
         }
	
	public static void main(String args[])
	{

	Node rootNode = null;
	rootNode = newNode(6,rootNode);
	rootNode = newNode(2,rootNode);
	rootNode =newNode(4,rootNode);
	rootNode = newNode(7,rootNode);
	rootNode = newNode(8,rootNode);
	printTree(rootNode);
	System.out.println("//////");
	System.out.println(min(rootNode));   // find min mumber 
	System.out.println(max(rootNode));  // find max number
	System.out.println("//////");
	System.out.println("Pre Order");
	preorder(rootNode); 
	System.out.println("Post Order");
	postorder(rootNode);
	System.out.println("Inorder Order");
	inorder(rootNode);
	}}

