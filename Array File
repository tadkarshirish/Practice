//////////////////////////////////////
Array program to find duplicate multiple ways


import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;
  
public class DuplicatesInArray 
{
    //Method 1 : Brute Force Method
      
    private static void findDuplicatesUsingBruteForce(int[] inputArray)
    {
        for (int i = 0; i < inputArray.length; i++) 
        {
            for (int j = i+1; j < inputArray.length; j++) 
            {
                if(inputArray&#91;i&#93; == inputArray&#91;j&#93;)
                {
                    System.out.println("Duplicate Element : "+inputArray&#91;i&#93;);
                }
            }
        }
    }
      
    //Method 2 : Sorting Method
      
    private static void findDuplicatesUsingSorting(int&#91;&#93; inputArray)
    {
        Arrays.sort(inputArray);
          
        for (int i = 0; i < inputArray.length-1; i++)
        {
            if(inputArray&#91;i&#93; == inputArray&#91;i+1&#93;)
            {
                System.out.println("Duplicate Element : " + inputArray&#91;i&#93;);
            }
        }
    }
      
    //Method 3 : Using HashSet
      
    private static void findDuplicatesUsingHashSet(int&#91;&#93; inputArray)
    {
        HashSet<Integer> set = new HashSet<Integer>();
          
        for (int element : inputArray) 
        {
            if( ! set.add(element))
            {
                System.out.println("Duplicate Element : "+element);
            }
        }
    }
    
    
    
      public static void main(String[] args) 
    {
        int[] inputArray = new int[] {111, 333, 555, 777, 333, 444, 555};
      
        System.out.println("======Duplicates Using Brute Force======");
          
        findDuplicatesUsingBruteForce(inputArray);
          
        System.out.println("======Duplicates Using Sorting======");
          
        findDuplicatesUsingSorting(inputArray);
          
        System.out.println("======Duplicates Using HashSet======");
          
        findDuplicatesUsingHashSet(inputArray);
  
        System.out.println("======Duplicates Using HashMap======");
          
        findDuplicatesUsingHashMap(inputArray);
          
        System.out.println("======Duplicates Using Java 8 Streams======");
          
        findDuplicatesUsingJava8(inputArray);
    }
}

.///////////////////////////////////////////////
// Java program to find second largest
// element in an array
import java.util.*;
class GFG{
 
// Function to print the
// second largest elements
static void print2largest(int arr[],
                          int arr_size)
{
  int i, first, second;
 
  // There should be
  // atleast two elements
  if (arr_size < 2)
  {
    System.out.printf(" Invalid Input ");
    return;
  }
 
  // Sort the array
  Arrays.sort(arr);
 
  // Start from second last element
  // as the largest element is at last
  for (i = arr_size - 2; i >= 0; i--)
  {
    // If the element is not
    // equal to largest element
    if (arr[i] != arr[arr_size - 1])
    {
      System.out.printf("The second largest " +
                        "element is %d\n", arr[i]);
      return;
    }
  }
 
  System.out.printf("There is no second " +
                    "largest element\n");
}
 
// Driver code
public static void main(String[] args)
{
  int arr[] = {12, 35, 1, 10, 34, 1};
  int n = arr.length;
  print2largest(arr, n);
}
}



//////////////////////////////////////////////////////////////
remove duplicate numbers from arra


// Java Program to Remove Duplicate Elements
// From the Array using extra space
 
public class Main {
    public static int removeDuplicates(int a[], int n)
    {
        // if(array size if 0 or 1 array is already sorted)
        if (n == 0 || n == 1) {
            return n;
        }
 
        int j = 0;
 
        // check if the ith element is not equal to
        // the (i+1)th element, then add that element
        // at the jth index in the same array
        // which indicates that te particular element
        // will only be added once in the array
        for (int i = 0; i < n - 1; i++) {
            if (a[i] != a[i + 1]) {
                a[j++] = a[i];
            }
        }
 
        a[j++] = a[n - 1];
 
        return j;
    }
 
    public static void main(String[] args)
    {
        int a[] = { 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6 };
 
        int n = a.length;
        
        int j=0;
       
        // the function will modify the array a[]
        // such that the starting j elements
        // will be having all unique elements
        // and no element will be appearing more than
        // once
        j = removeDuplicates(a, n);
 
        // printing array elements
        for (int i = 0; i < j; i++)
            System.out.print(a[i] + " ");
    }
}
